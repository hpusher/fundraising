/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PaymentMethodService } from "../paymentMethod.service";
import { PaymentMethodCreateInput } from "./PaymentMethodCreateInput";
import { PaymentMethod } from "./PaymentMethod";
import { PaymentMethodFindManyArgs } from "./PaymentMethodFindManyArgs";
import { PaymentMethodWhereUniqueInput } from "./PaymentMethodWhereUniqueInput";
import { PaymentMethodUpdateInput } from "./PaymentMethodUpdateInput";

export class PaymentMethodControllerBase {
  constructor(protected readonly service: PaymentMethodService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaymentMethod })
  async createPaymentMethod(
    @common.Body() data: PaymentMethodCreateInput
  ): Promise<PaymentMethod> {
    return await this.service.createPaymentMethod({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PaymentMethod] })
  @ApiNestedQuery(PaymentMethodFindManyArgs)
  async paymentMethods(
    @common.Req() request: Request
  ): Promise<PaymentMethod[]> {
    const args = plainToClass(PaymentMethodFindManyArgs, request.query);
    return this.service.paymentMethods({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaymentMethod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async paymentMethod(
    @common.Param() params: PaymentMethodWhereUniqueInput
  ): Promise<PaymentMethod | null> {
    const result = await this.service.paymentMethod({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaymentMethod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePaymentMethod(
    @common.Param() params: PaymentMethodWhereUniqueInput,
    @common.Body() data: PaymentMethodUpdateInput
  ): Promise<PaymentMethod | null> {
    try {
      return await this.service.updatePaymentMethod({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaymentMethod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePaymentMethod(
    @common.Param() params: PaymentMethodWhereUniqueInput
  ): Promise<PaymentMethod | null> {
    try {
      return await this.service.deletePaymentMethod({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
