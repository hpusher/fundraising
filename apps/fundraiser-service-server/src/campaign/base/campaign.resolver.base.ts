/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Campaign } from "./Campaign";
import { CampaignCountArgs } from "./CampaignCountArgs";
import { CampaignFindManyArgs } from "./CampaignFindManyArgs";
import { CampaignFindUniqueArgs } from "./CampaignFindUniqueArgs";
import { DeleteCampaignArgs } from "./DeleteCampaignArgs";
import { CampaignCreateInput } from "./CampaignCreateInput";
import { CampaignUpdateInput } from "./CampaignUpdateInput";
import { CampaignService } from "../campaign.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Campaign)
export class CampaignResolverBase {
  constructor(
    protected readonly service: CampaignService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Campaign",
    action: "read",
    possession: "any",
  })
  async _campaignsMeta(
    @graphql.Args() args: CampaignCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Campaign])
  @nestAccessControl.UseRoles({
    resource: "Campaign",
    action: "read",
    possession: "any",
  })
  async campaigns(
    @graphql.Args() args: CampaignFindManyArgs
  ): Promise<Campaign[]> {
    return this.service.campaigns(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Campaign, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Campaign",
    action: "read",
    possession: "own",
  })
  async campaign(
    @graphql.Args() args: CampaignFindUniqueArgs
  ): Promise<Campaign | null> {
    const result = await this.service.campaign(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Campaign)
  @nestAccessControl.UseRoles({
    resource: "Campaign",
    action: "delete",
    possession: "any",
  })
  async deleteCampaign(
    @graphql.Args() args: DeleteCampaignArgs
  ): Promise<Campaign | null> {
    try {
      return await this.service.deleteCampaign(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Campaign)
  async CreateCampaign(
    @graphql.Args()
    args: CampaignCreateInput
  ): Promise<Campaign> {
    return this.service.CreateCampaign(args);
  }

  @graphql.Mutation(() => Campaign)
  async UpdateCampaign(
    @graphql.Args()
    args: CampaignUpdateInput
  ): Promise<Campaign> {
    return this.service.UpdateCampaign(args);
  }
}
