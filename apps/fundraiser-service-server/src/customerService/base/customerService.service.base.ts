/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CustomerService as PrismaCustomerService,
} from "@prisma/client";

export class CustomerServiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerServiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerService.count(args);
  }

  async customerServices(
    args: Prisma.CustomerServiceFindManyArgs
  ): Promise<PrismaCustomerService[]> {
    return this.prisma.customerService.findMany(args);
  }
  async customerService(
    args: Prisma.CustomerServiceFindUniqueArgs
  ): Promise<PrismaCustomerService | null> {
    return this.prisma.customerService.findUnique(args);
  }
  async createCustomerService(
    args: Prisma.CustomerServiceCreateArgs
  ): Promise<PrismaCustomerService> {
    return this.prisma.customerService.create(args);
  }
  async updateCustomerService(
    args: Prisma.CustomerServiceUpdateArgs
  ): Promise<PrismaCustomerService> {
    return this.prisma.customerService.update(args);
  }
  async deleteCustomerService(
    args: Prisma.CustomerServiceDeleteArgs
  ): Promise<PrismaCustomerService> {
    return this.prisma.customerService.delete(args);
  }
}
