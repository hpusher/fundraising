/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContactUsService } from "../contactUs.service";
import { ContactUsCreateInput } from "./ContactUsCreateInput";
import { ContactUs } from "./ContactUs";
import { ContactUsFindManyArgs } from "./ContactUsFindManyArgs";
import { ContactUsWhereUniqueInput } from "./ContactUsWhereUniqueInput";
import { ContactUsUpdateInput } from "./ContactUsUpdateInput";

export class ContactUsControllerBase {
  constructor(protected readonly service: ContactUsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContactUs })
  async createContactUs(
    @common.Body() data: ContactUsCreateInput
  ): Promise<ContactUs> {
    return await this.service.createContactUs({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContactUs] })
  @ApiNestedQuery(ContactUsFindManyArgs)
  async contactuses(@common.Req() request: Request): Promise<ContactUs[]> {
    const args = plainToClass(ContactUsFindManyArgs, request.query);
    return this.service.contactuses({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContactUs })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contactUs(
    @common.Param() params: ContactUsWhereUniqueInput
  ): Promise<ContactUs | null> {
    const result = await this.service.contactUs({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContactUs })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContactUs(
    @common.Param() params: ContactUsWhereUniqueInput,
    @common.Body() data: ContactUsUpdateInput
  ): Promise<ContactUs | null> {
    try {
      return await this.service.updateContactUs({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContactUs })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContactUs(
    @common.Param() params: ContactUsWhereUniqueInput
  ): Promise<ContactUs | null> {
    try {
      return await this.service.deleteContactUs({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
